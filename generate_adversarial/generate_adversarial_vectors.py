import sys
import os
sys.path.insert(1, os.path.join(sys.path[0], '..'))

from utils.utils import load_parameters
from datasets.datasets import load_malicious_data
import torch
from inner_maximizers.inner_maximizers import inner_maximizer
import torch.nn as nn
import pickle
import random

def main():
    '''
    Generates adversarial samples using each training method and evasion method combination
    '''

    if len(sys.argv) == 1:
        parameters = load_parameters("generate_adversarial_parameters.ini")
    else:
        parameters = load_parameters(sys.argv[1])

    # Seed so that synthetic data is the same
    use_seed = eval(parameters['general']['use_seed'])
    if use_seed:
        seed_val = int(parameters["general"]["seed"])
    else:
        seed_val = random.randint(1, 10000)

    random.seed(seed_val)
    torch.manual_seed(seed_val)

    malicious_dataloader = load_malicious_data(parameters)

    output_directory = parameters['general']['output_directory_for_adv_vecs']

    if not os.path.exists(output_directory):
        os.mkdir(output_directory)

    print("Generating adversarial samples for each method")
    loss_fct = nn.NLLLoss(reduce=False)
    experiment_name = parameters['general']['experiment_name']
    evasion_iterations = int(parameters['hyperparam']['evasion_iterations'])

    print("Using experiment models: ", experiment_name)

    train_methods = ['natural']
    evasion_methods = ['rfgsm_k', 'dfgsm_k', 'bga_k', 'bca_k']

    saved_model_directory = parameters['general']['saved_model_directory']

    is_synthetic = eval(parameters['general']['is_synthetic_dataset'])

    for train_method in train_methods:
        train_directory = os.path.join(output_directory, train_method)
        if not os.path.exists(train_directory):
            os.mkdir(train_directory)

        model_filepath = os.path.join(saved_model_directory, "[training:{train_meth}|evasion:{train_meth}]_{exp_name}-model.pt".format(
            train_meth=train_method, exp_name=experiment_name))
        model = torch.load(model_filepath)

        for evasion_method in evasion_methods:
            print(train_method, evasion_method)

            evasion_subdirectory = os.path.join(train_directory, evasion_method)
            if not os.path.exists(evasion_subdirectory):
                os.mkdir(evasion_subdirectory)

            if is_synthetic:
                for i, (mal_x, mal_y) in enumerate(malicious_dataloader):
                    actual_filename = str(i) + ".p"

                    mal_x = inner_maximizer(
                        mal_x, mal_y, model, loss_fct, iterations=evasion_iterations, method=evasion_method,
                        report_loss_diff=False)

                    # Save the adversarial vector as a pickle file
                    pickle.dump(mal_x, open(os.path.join(evasion_subdirectory, actual_filename), "wb"))
            else:
                for i, (mal_x, mal_y, filepath) in enumerate(malicious_dataloader):
                    actual_filename = filepath[0].split('/')[-1]

                    mal_x = inner_maximizer(
                        mal_x, mal_y, model, loss_fct, iterations=evasion_iterations, method=evasion_method, report_loss_diff=False)

                    # Save the adversarial vector as a pickle file
                    pickle.dump(mal_x, open(os.path.join(evasion_subdirectory, actual_filename), "wb"))

if __name__ == '__main__':
    main()
