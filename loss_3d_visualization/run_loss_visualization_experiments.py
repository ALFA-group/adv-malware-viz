import sys
import os
sys.path.insert(1, os.path.join(sys.path[0], '..'))

from os import system
from utils.utils import load_parameters, set_parameter
import shutil
import time

if __name__ == "__main__":
    original_parameters_filepath = "loss_visual_params.ini"
    original_parameters = load_parameters(original_parameters_filepath)

    # If true, the loss will be calculated using all types of adversarial vectors
    use_all_attack_variants = eval(original_parameters['general']['use_all_attack_variants'])

    experiment_name = sys.argv[1]
    exp_time = time.strftime("%m_%d_%Hh_%Mm", time.localtime())

    # Create duplicate parameters file in directory
    new_params_directory = "experiment_parameters"
    new_params_name = "loss_parameters_{exp}_{time}.ini".format(
        exp=experiment_name, time=exp_time)

    if not os.path.exists(new_params_directory):
        os.mkdir(new_params_directory)

    new_params_filepath = os.path.join(new_params_directory, new_params_name)
    shutil.copy(original_parameters_filepath, new_params_filepath)

    print("Using models from experiment:", experiment_name)
    set_parameter(new_params_filepath, "general", "experiment_name", experiment_name)


    if use_all_attack_variants:
        print("Calculating loss using all attack variants")
    else:
        print("Calculating loss using only the attack used to train the model")

    trained_models_directory = "../trained_models"
    train_methods = ['natural', 'rfgsm_k', 'dfgsm_k', 'bga_k', 'bca_k']
    for train_method in train_methods:

        set_parameter(new_params_filepath, "general", "training_method", train_method)

        model_filepath = os.path.join(trained_models_directory, "[training:{train_meth}|evasion:{train_meth}]_{exp_name}-model.pt".format(
            train_meth=train_method, exp_name=experiment_name))
        set_parameter(new_params_filepath, "general", "model_weights_path", model_filepath)

        if use_all_attack_variants:
            system("source activate nn_mal; python loss_visualization.py {param_path} {time}".format(
                param_path=new_params_filepath, time=exp_time))
        else:
            system("source activate nn_mal; python loss_visualization.py {param_path} {time} {adv_vec_type}".format(
                param_path=new_params_filepath, time=exp_time, adv_vec_type=train_method))

